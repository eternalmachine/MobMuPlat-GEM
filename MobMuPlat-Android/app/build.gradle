apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    //buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.iglesiaintermedia.mobmuplat"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 25
        versionName "0.37"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    useLibrary 'org.apache.http.legacy' // Will need on SDK 23.
    android {
        lintOptions {
            abortOnError false // Throws a lint error about the below wearable mismatch, but this seems to be ok on page 50: https://media.readthedocs.org/pdf/android-wear-docs/latest/android-wear-docs.pdf
        }
    }
    //
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml' //DEI need?
            java.srcDirs = ['src']
            jniLibs.srcDir 'libs' //set .so files location to libs
            jni.srcDirs = [] //disable automatic ndk-build call
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of the default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    tasks.create(name: 'buildNative', type: Exec, description: 'Compile JNI source via NDK') {
        commandLine getNdkBuildExecutablePath(),
                'V=1',
                '-C', file('jni').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                'all',
                'NDK_DEBUG=1'
    }

    tasks.create(name: 'cleanNative', type: Exec, description: 'Clean JNI object files') {
        commandLine getNdkBuildExecutablePath(), 'V=1', '-C', file('jni').absolutePath, 'clean'
    }

    clean.dependsOn 'cleanNative'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn 'buildNative'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    implementation "androidx.legacy:legacy-support-v4:1.0.0" //dei click?
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.fragment:fragment:1.2.4'

    implementation files('libs/gson-2.2.4.jar') //necc?
    implementation project(':PdCore');
}

def getNdkBuildExecutablePath() {
    File ndkDir = android.ndkDirectory
    if (ndkDir == null) {
        throw new Exception('NDK location not found. Define location with ndk.dir in the ' +
                'local.properties file or with an ANDROID_NDK_HOME environment variable.')
    }
    def isWindows = System.properties['os.name'].toLowerCase().contains('windows')
    def ndkBuildFile = new File(ndkDir, isWindows ? 'ndk-build.cmd' : 'ndk-build')
    if (!ndkBuildFile.exists()) {
        throw new Exception("ndk-build executable not found: $ndkBuildFile.absolutePath")
    }
    ndkBuildFile.absolutePath
}